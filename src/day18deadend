#include"load.h"
#include<string.h>
#include<stdbool.h>
static long long PerformMath(char *line, int *idp)
{
	int id = *idp;
	long long val = 0;
	char Operator = 0;
	do{
		switch(line[id]){
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				if(Operator == '+')
					val += atoll(line+id);
				else if(Operator == '*')
					val *= atoll(line+id);
				else
					val = atoll(line+id);
				int span = strspn(line+id, "0123456789") - 1;
				id += span;
				break;
			case '(':
				id++;
				if(Operator == '+')
					val += PerformMath(line, &id);
				else if(Operator == '*')
					val *= PerformMath(line, &id);
				else
					val = PerformMath(line, &id);
				break;
			case ')':
				*idp = id;
				return val;
				break;
			case '*':
			case '+':
				Operator = line[id];
				break;
		}
	}while(line[id++] != '\0');
	return val;
}
char *fixLine(char *line)
{
	int id = 0;
	int parenDepth = 0;
	int parenMax = 0;
	int initialLen = strlen(line);
	while(id < initialLen){
		if(line[id] == '(') parenDepth++;
		else if(line[id] == ')') parenDepth--;
		parenMax = (parenDepth > parenMax) ? parenDepth : parenMax;
		id++;
	}
	printf("Max Parenthesis depth: %d\n", parenMax);

	/*Calculate additional space needed*/
	char prevOP = 0;
	id = 0;
	int extraSpace = 0;
	while(id < initialLen){
		if(line[id] == '+')
		{
			if(prevOP != '+')
				extraSpace += 2;
			prevOP = '+';
		}else if(line[id] == '*')
			prevOP = '*';
		else if(line[id] == '(')
			prevOP = '(';
		else if(line[id] == ')')
			prevOP = ')';
		id++;
	}
	printf("Extra Space Required: %d Bytes\n", extraSpace);

	/*Instert extra parenthesis*/
	char *fixedLine = calloc(initialLen + extraSpace, sizeof(char));
	id = 0;
	for(int p = 0; p <= parenMax; p++)
	{
		parenDepth = 0;
		for(int i = 0; i < initialLen; i++)
		{
			if(line[i] == ' ') continue;
			if(line[i] == '+') continue;
			if(line[i] == '*') continue;

			if(line[i] == '(') parenDepth++;
			else if(line[i] == ')') parenDepth--;
			int w;
			for(w = i; w < initialLen;  w++)
			{
				if((parenDepth == p) && (line[w] == '*'))
				{
					w = -1;
					break;
				}
			}
			if(w != -1)
			{
				printf("first: %d - char: %c\nlast: %d - char: %c\n",
						i, line[i], w, line[w]);
				i = w;
			}
		}
	}
	return fixedLine;
}
void day18_2(){
	char *input = loadinput("../input/test18.txt");
	char *dupin = input;
	/*Split into lines*/
	char **lines = NULL;
	int lineCount = 0;
	while(1)
	{
		lineCount++;
		lines = realloc(lines, lineCount * sizeof(char*));
		lines[lineCount - 1] = dupin;
		dupin = strchr(dupin, '\n');
		if(!dupin) break;
		*dupin = '\0';
		dupin++;
	}
	lineCount--;
	/*Check if input was split correctly*/
	printf("Lines: %d\n", lineCount);
	for(int i = 0; i < lineCount; i++)
		printf("<%s>\n", lines[i]);
	/*Prioritize Addition*/
	printf("\nFixing Lines...\n");
	char **fixedLines = calloc(lineCount, sizeof(char*));
	for(int i = 0; i < lineCount; i++)
		fixedLines[i] = fixLine(lines[i]);
	putchar('\n');
	/*Start Parsing Fixed Lines*/
	long long cumSum = 0;
	for(int i = 0; i < lineCount; i++){
		int start = 0;
		long long val = PerformMath(lines[i], &start);
		cumSum += val;
		printf("Cumulative: %lld, Result:%lld\n", cumSum, val);
	}
	free(input);
}
